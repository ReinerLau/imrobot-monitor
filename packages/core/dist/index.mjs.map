{"version":3,"sources":["../src/handleEvents.ts","../src/utlis/index.ts","../src/shared/index.ts","../src/subscribe.ts","../src/replace.ts","../src/install.ts","../src/index.ts"],"sourcesContent":["import {\n  ErrorEventTypes,\n  ErrorTypes,\n  getTimestamp,\n  reportData,\n} from \"@imrobot/shared\";\nimport errorStackParser from \"error-stack-parser\";\nimport type { ResourceErrorTarget, XHRData } from \"./types\";\nimport { getErrorUid, hasHash } from \"./utlis\";\n\nexport const handleError = (err: Error) => {\n  const { fileName, columnNumber, lineNumber } = errorStackParser.parse(err)[0];\n\n  const errorData = {\n    type: ErrorEventTypes.ERROR,\n    fileName,\n    url: location.href,\n    message: err.message,\n    lineNumber,\n    columnNumber,\n    time: getTimestamp(),\n  };\n  const hash = getErrorUid(\n    `${errorData.type}-${errorData.message}-${errorData.url}-${errorData.columnNumber}`\n  );\n\n  if (!hasHash(hash)) {\n    reportData(\"/error/code\", errorData);\n    return ErrorTypes.CODE;\n  }\n};\n\n/**\n * 处理加载资源错误\n * @param err 错误详情\n */\nexport const handleResourceError = ({\n  src,\n  localName,\n  href,\n}: ResourceErrorTarget) => {\n  const errorData = {\n    url: location.href,\n    type: ErrorEventTypes.RESOURCE,\n    source: src || href,\n    target: localName,\n    time: getTimestamp(),\n  };\n  const hash = getErrorUid(\n    `${errorData.type}-${errorData.source}-${errorData.url}-${errorData.target}`\n  );\n\n  if (!hasHash(hash)) {\n    reportData(\"/error/resource\", errorData);\n    return ErrorTypes.RESOURCE;\n  }\n};\n\n/**\n * 处理 Promise 错误\n * @param ev 错误信息\n */\nexport const handleUnhandleRejection = (ev: PromiseRejectionEvent) => {\n  if (ev.reason.name === \"AxiosError\") return; // 防止 axios 请求错误触发\n  const { fileName, columnNumber, lineNumber } = errorStackParser.parse(\n    ev.reason\n  )[0];\n  const errorData = {\n    type: ErrorEventTypes.UNHANDLEDREJECTION,\n    fileName,\n    url: location.href,\n    message: ev.reason.message,\n    lineNumber,\n    columnNumber,\n    time: getTimestamp(),\n  };\n  const hash = getErrorUid(\n    `${errorData.type}-${errorData.message}-${errorData.url}-${errorData.columnNumber}`\n  );\n\n  if (!hasHash(hash)) {\n    reportData(\"/error/code\", errorData);\n    return ErrorTypes.CODE;\n  }\n};\n\n/**\n * 处理请求错误信息\n * @param data 请求信息\n */\nexport const handleHTTPRequest = (data: XHRData) => {\n  const { url, sendTime, status, elapsedTime, response, requestData, method } =\n    data;\n  if (status === 0 || status! >= 400) {\n    const errorData = {\n      type: ErrorEventTypes.XHR,\n      url: location.href,\n      requestURL: url,\n      time: sendTime,\n      status,\n      response,\n      elapsedTime,\n      method,\n      requestData,\n    };\n    const hash = getErrorUid(\n      `${errorData.type}-${errorData.response}-${errorData.method}-${errorData.status}`\n    );\n\n    if (!hasHash(hash)) {\n      reportData(\"/error/request\", errorData);\n      return ErrorTypes.REQUEST;\n    }\n  }\n};\n","import md5 from \"md5\";\nimport { hashSet } from \"../shared\";\n\n/**\n * 生成唯一编码\n * @param input 错误详情\n * @returns 唯一编码\n */\nexport const getErrorUid = (input: string): string => {\n  return md5(input);\n};\n\nexport function hasHash(hash: string) {\n  if (hashSet.has(hash)) return true;\n  hashSet.add(hash);\n  return false;\n}\n","export const hashSet = new Set();\n","import { ErrorTypes, EventTypes, global } from \"@imrobot/shared\";\nimport { App } from \"vue\";\nimport { xhrReplace } from \"./replace\";\nimport { AfterErrorEvent } from \"./types\";\n\n/**\n * 所有错误事件集合\n */\nconst events: { [key in EventTypes]?: AfterErrorEvent } = {};\n\n/**\n * 开始监听对应错误事件的集合\n */\nconst on: { [key in EventTypes]?: Function } = {\n  [EventTypes.VUE]: (app: App) => onVueError(app),\n  [EventTypes.ERROR]: () => onError(),\n  [EventTypes.UNHANDLEDREJECTION]: () => onPromiseError(),\n  [EventTypes.XHR]: () => xhrReplace(),\n};\n\n/**\n * 订阅事件\n * @param eventType 事件类型\n * @param event 事件\n * @returns 是否订阅成功\n */\nexport const subscribeEvent = (\n  eventType: EventTypes,\n  event: AfterErrorEvent,\n  vueInstance?: App\n) => {\n  if (eventType in events) return false;\n  events[eventType] = event;\n  const onEvent = on[eventType];\n  if (vueInstance) {\n    onEvent && onEvent(vueInstance);\n  } else {\n    onEvent && onEvent();\n  }\n  return true;\n};\n\n/**\n * 通知事件触发\n * @param eventType 事件类型\n */\nexport const notify = (eventType: EventTypes, ...args: any[]) => {\n  global.hasError = true;\n  const event = events[eventType];\n  if (event) {\n    const errorType = event(...args);\n    errorType && notifyAfterErrorEvent(errorType);\n  }\n};\n\n/**\n * 监听 vue 代码运行错误\n * @param app vue 实例\n */\nconst onVueError = (app: App) => {\n  app.config.errorHandler = (err) => {\n    notify(EventTypes.VUE, err);\n  };\n};\n\n/**\n * 监听加载资源错误和异步错误\n */\nconst onError = () => {\n  window.addEventListener(\n    EventTypes.ERROR,\n    (ev) => notify(EventTypes.ERROR, ev),\n    true\n  );\n};\n\n/**\n * 监听 Promise 错误\n */\nconst onPromiseError = () => {\n  window.addEventListener(EventTypes.UNHANDLEDREJECTION, (ev) =>\n    notify(EventTypes.UNHANDLEDREJECTION, ev)\n  );\n};\n\nconst afterErrorEvents: Function[] = [];\n\nexport const subscribeAfterErrorEvent = (event: Function) => {\n  afterErrorEvents.push(event);\n};\n\nexport const notifyAfterErrorEvent = (errorType: ErrorTypes) => {\n  afterErrorEvents.forEach((event) => {\n    // 变成宏任务, 防止在其他插件事件之前执行\n    setTimeout(() => {\n      event(errorType);\n    }, 0);\n  });\n};\n","import { EventTypes, getTimestamp } from \"@imrobot/shared\";\nimport { notify } from \"./subscribe\";\nimport { XHRInstance } from \"./types\";\n\n/**\n * 重写 xmlhttprequset 原型方法\n */\nexport const xhrReplace = () => {\n  xhrOpenReplace();\n  xhrSendReplace();\n};\n\n/**\n * 重写 xmlhttprequest open 方法\n */\nconst xhrOpenReplace = () => {\n  const originalXHRProto = XMLHttpRequest.prototype;\n  const originalOpen = originalXHRProto.open;\n  originalXHRProto.open = function (...args: [string, string]) {\n    const instance: XHRInstance = this;\n    instance.data = {\n      method: args[0],\n      url: args[1],\n      sendTime: getTimestamp(),\n    };\n    originalOpen.apply(instance, args);\n  };\n};\n\n/**\n * 重写 xmlhttprequest send 方法\n */\nconst xhrSendReplace = () => {\n  const originalXHRProto = XMLHttpRequest.prototype;\n  const originalSend = originalXHRProto.send;\n  originalXHRProto.send = function (...args: any[]) {\n    const instance: XHRInstance = this;\n    instance.data.requestData = args[0];\n    instance.addEventListener(\"loadend\", () => {\n      const { responseType, response, status } = instance;\n      if ([\"\", \"json\", \"text\"].includes(responseType)) {\n        instance.data.response = response;\n        instance.data.status = status;\n        instance.data.elapsedTime =\n          new Date(getTimestamp()).getTime() -\n          new Date(instance.data.sendTime).getTime();\n      }\n      notify(EventTypes.XHR, instance.data);\n    });\n    originalSend.apply(instance, args);\n  };\n};\n","import type { App } from \"vue\";\nimport {\n  handleError,\n  handleHTTPRequest,\n  handleResourceError,\n  handleUnhandleRejection,\n} from \"./handleEvents\";\nimport type { ResourceErrorTarget, Use, XHRData } from \"./types\";\nimport { subscribeAfterErrorEvent, subscribeEvent } from \"./subscribe\";\nimport { EventTypes, extensionInstallEvent } from \"@imrobot/shared\";\n\n/**\n * 插件安装方法\n * @param app vue 实例\n */\nexport const install = (app: App): void => {\n  subscribeEvent(\n    EventTypes.VUE,\n    (err: Error) => {\n      return handleError(err);\n    },\n    app\n  );\n  subscribeEvent(EventTypes.ERROR, (ev: ErrorEvent) => {\n    const target = ev.target as ResourceErrorTarget;\n    if (target?.localName) {\n      return handleResourceError(target);\n    } else {\n      return handleError(ev.error);\n    }\n  });\n  subscribeEvent(EventTypes.UNHANDLEDREJECTION, (ev: PromiseRejectionEvent) => {\n    return handleUnhandleRejection(ev);\n  });\n  subscribeEvent(EventTypes.XHR, (xhrData: XHRData) => {\n    return handleHTTPRequest(xhrData);\n  });\n  extensionTrigger();\n};\n\n/**\n * 已注册拓展集合\n */\nexport const extensionInstallEvents: extensionInstallEvent[] = [];\n\n/**\n * 注册拓展\n * @param extension 拓展实例\n */\nexport const use: Use = (extension, options) => {\n  extensionInstallEvents.push(() => extension.install(options));\n  extension.afterEvent && subscribeAfterErrorEvent(extension.afterEvent);\n};\n\n/**\n * 触发拓展初始化方法\n */\nconst extensionTrigger = () => {\n  extensionInstallEvents.forEach((event) => {\n    event();\n  });\n};\n","import { install, use } from \"./install\";\nimport { Monitor } from \"./types\";\nexport { default as behavior } from \"@imrobot/behavior\";\nexport { playScreen, default as screen } from \"@imrobot/screen\";\n\nconst monitor: Monitor = {\n  install,\n  use,\n};\n\nexport default monitor;\n"],"mappings":"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","names":["ErrorEventTypes","ErrorTypes","getTimestamp","reportData","errorStackParser","md5","hashSet","getErrorUid","input","md5","hasHash","hash","hashSet","handleError","err","fileName","columnNumber","lineNumber","errorStackParser","errorData","ErrorEventTypes","getTimestamp","hash","getErrorUid","hasHash","reportData","ErrorTypes","handleResourceError","src","localName","href","handleUnhandleRejection","ev","handleHTTPRequest","data","url","sendTime","status","elapsedTime","response","requestData","method","EventTypes","global","EventTypes","getTimestamp","xhrReplace","xhrOpenReplace","xhrSendReplace","originalXHRProto","originalOpen","args","instance","getTimestamp","originalSend","responseType","response","status","notify","EventTypes","events","on","EventTypes","app","onVueError","onError","onPromiseError","xhrReplace","subscribeEvent","eventType","event","vueInstance","onEvent","notify","args","global","errorType","notifyAfterErrorEvent","err","ev","afterErrorEvents","subscribeAfterErrorEvent","EventTypes","install","app","subscribeEvent","err","handleError","ev","target","handleResourceError","handleUnhandleRejection","xhrData","handleHTTPRequest","extensionTrigger","extensionInstallEvents","use","extension","options","subscribeAfterErrorEvent","event","default","playScreen","monitor","install","use","src_default"]}